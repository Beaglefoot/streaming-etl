version: '3'

services:
  app-db:
    image: postgres:14
    hostname: app-db
    ports:
      - 5432:5432
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - ./services/app-db/init-scripts:/docker-entrypoint-initdb.d
      - ./services/app-db/postgres.conf:/usr/share/postgresql/postgresql.conf.sample
      - app_db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 5s
      retries: 5

  data-generator:
    entrypoint: ["echo", "Service data-generator is disabled"]
    build:
      context: ./services/data-generator
    hostname: data-generator
    environment:
      - POSTGRES_HOST=app-db
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    depends_on:
      app-db:
        condition: service_healthy

  zookeeper:
    image: bitnami/zookeeper:3.7
    hostname: zookeeper
    ports:
      - 2181:2181
    volumes:
      - zookeeper_data:/bitnami
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes

  kafka:
    image: bitnami/kafka:3
    hostname: kafka
    ports:
      - 9092:9092
    volumes:
      - kafka_data:/bitnami
    environment:
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=INTERNAL://:29092,EXTERNAL://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=INTERNAL://kafka:29092,EXTERNAL://localhost:9092
      - KAFKA_INTER_BROKER_LISTENER_NAME=INTERNAL
    depends_on:
      - zookeeper

  kafka-connect:
    build:
      context: ./services/kafka-connect
    hostname: kafka-connect
    ports:
      - 8083:8083
    volumes:
      - ./wait-for-it.sh:/usr/bin/wait-for-it.sh
    environment:
      - CONNECT_BOOTSTRAP_SERVERS=kafka:29092
      - CONNECT_GROUP_ID=1
      - CONNECT_REST_ADVERTISED_HOST_NAME=kafka-connect
      - CONNECT_CONFIG_STORAGE_TOPIC=app_db_connect_configs
      - CONNECT_OFFSET_STORAGE_TOPIC=app_db_connect_offsets
      - CONNECT_STATUS_STORAGE_TOPIC=app_db_connect_statuses
      - CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR=1
      - CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR=1
      - CONNECT_STATUS_STORAGE_REPLICATION_FACTOR=1
      - CONNECT_KEY_CONVERTER=org.apache.kafka.connect.storage.StringConverter
      - CONNECT_VALUE_CONVERTER=io.confluent.connect.json.JsonSchemaConverter
      - CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL=http://schema-registry:8081
    depends_on:
      - zookeeper
      - kafka
      - schema-registry
      - app-db
    command: ["wait-for-it.sh", "kafka:29092", "-t", "30", "--", "/etc/confluent/docker/run"]

  schema-registry:
    image: confluentinc/cp-schema-registry:7.1.1
    hostname: schema-registry
    restart: on-failure
    ports:
      - 8081:8081
    volumes:
      - ./wait-for-it.sh:/usr/bin/wait-for-it.sh
    environment:
      - SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS=kafka:29092
      - SCHEMA_REGISTRY_HOST_NAME=schema-registry
    depends_on:
      - kafka
    command: ["wait-for-it.sh", "kafka:29092", "-t", "30", "--", "/etc/confluent/docker/run"]

  staging-db:
    image: postgres:14
    hostname: staging-db
    ports:
      - 5433:5432
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - ./services/staging-db/init-scripts:/docker-entrypoint-initdb.d
      - staging_db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 5s
      retries: 5

  dwh:
    image: postgres:14
    hostname: dwh
    ports:
      - 5434:5432
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - ./services/dwh/init-scripts:/docker-entrypoint-initdb.d
      - dwh_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 5s
      retries: 5


volumes:
  app_db_data:
    driver: local

  zookeeper_data:
    driver: local

  kafka_data:
    driver: local

  staging_db_data:
    driver: local

  dwh_data:
    driver: local
